
Morph4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000058c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000518  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800100  00800100  0000058c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000605  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000267  00000000  00000000  00000c65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000400  00000000  00000000  00000ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  000012cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001db  00000000  00000000  0000136c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a2  00000000  00000000  00001547  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000017e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 32       	cpi	r26, 0x21	; 33
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 c0 00 	call	0x180	; 0x180 <main>
  88:	0c 94 8a 02 	jmp	0x514	; 0x514 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ADC_Init>:


void ADC_Init()
{
	
	ADMUX = (1<<REFS1) | (1<<REFS0);
  90:	80 ec       	ldi	r24, 0xC0	; 192
  92:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1<<ADPS1) | (1<<ADPS0);
  96:	ea e7       	ldi	r30, 0x7A	; 122
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	83 e0       	ldi	r24, 0x03	; 3
  9c:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);
  9e:	80 81       	ld	r24, Z
  a0:	80 68       	ori	r24, 0x80	; 128
  a2:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
  a4:	80 81       	ld	r24, Z
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) ) {
  aa:	80 81       	ld	r24, Z
  ac:	86 fd       	sbrc	r24, 6
  ae:	fd cf       	rjmp	.-6      	; 0xaa <ADC_Init+0x1a>
	}
	(void) ADCW;
  b0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  b4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  b8:	08 95       	ret

000000ba <ADC_Read>:
}

uint16_t ADC_Read( uint8_t channel )
{
	ADMUX = (channel & 0xFF);
  ba:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1<<ADSC);
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) ) {
  c8:	80 81       	ld	r24, Z
  ca:	86 fd       	sbrc	r24, 6
  cc:	fd cf       	rjmp	.-6      	; 0xc8 <ADC_Read+0xe>
	}
	return ADCW;
  ce:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  d2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
  d6:	08 95       	ret

000000d8 <SPI_init>:

void SPI_init(){

	DDRB |= (1<<PB5);
  d8:	25 9a       	sbi	0x04, 5	; 4
	DDRB &= ~(1<<PB4);
  da:	24 98       	cbi	0x04, 4	; 4
	DDRB |= (1<<PB3);  //MOSI
  dc:	23 9a       	sbi	0x04, 3	; 4
	DDRB |= (1<<PB2);  //SS_ENABLE
  de:	22 9a       	sbi	0x04, 2	; 4
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
  e0:	8c b5       	in	r24, 0x2c	; 44
  e2:	81 65       	ori	r24, 0x51	; 81
  e4:	8c bd       	out	0x2c, r24	; 44
  e6:	08 95       	ret

000000e8 <SPI_send>:
}

uint8_t SPI_send(uint8_t data){

	SPDR = data;
  e8:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
  ea:	0d b4       	in	r0, 0x2d	; 45
  ec:	07 fe       	sbrs	r0, 7
  ee:	fd cf       	rjmp	.-6      	; 0xea <SPI_send+0x2>
	return SPDR;
  f0:	8e b5       	in	r24, 0x2e	; 46
}
  f2:	08 95       	ret

000000f4 <DAC_write>:

void DAC_write(uint8_t dev_nr,uint16_t val)
{
  f4:	cf 93       	push	r28
  f6:	c6 2f       	mov	r28, r22
	switch(dev_nr)
  f8:	81 30       	cpi	r24, 0x01	; 1
  fa:	89 f0       	breq	.+34     	; 0x11e <DAC_write+0x2a>
  fc:	28 f0       	brcs	.+10     	; 0x108 <DAC_write+0x14>
  fe:	82 30       	cpi	r24, 0x02	; 2
 100:	c9 f0       	breq	.+50     	; 0x134 <DAC_write+0x40>
 102:	83 30       	cpi	r24, 0x03	; 3
 104:	11 f1       	breq	.+68     	; 0x14a <DAC_write+0x56>
 106:	2b c0       	rjmp	.+86     	; 0x15e <DAC_write+0x6a>
	{
		case 0 :   DESELECT_DAC2;SELECT_DAC1;SPI_send(0b11010000|(val>>8));SPI_send(val);DESELECT_DAC1;break;
 108:	29 9a       	sbi	0x05, 1	; 5
 10a:	28 98       	cbi	0x05, 0	; 5
 10c:	87 2f       	mov	r24, r23
 10e:	80 6d       	ori	r24, 0xD0	; 208
 110:	0e 94 74 00 	call	0xe8	; 0xe8 <SPI_send>
 114:	8c 2f       	mov	r24, r28
 116:	0e 94 74 00 	call	0xe8	; 0xe8 <SPI_send>
 11a:	28 9a       	sbi	0x05, 0	; 5
 11c:	20 c0       	rjmp	.+64     	; 0x15e <DAC_write+0x6a>
		case 1 :   DESELECT_DAC2;SELECT_DAC1;SPI_send(0b01010000|(val>>8));SPI_send(val);DESELECT_DAC1;break;
 11e:	29 9a       	sbi	0x05, 1	; 5
 120:	28 98       	cbi	0x05, 0	; 5
 122:	87 2f       	mov	r24, r23
 124:	80 65       	ori	r24, 0x50	; 80
 126:	0e 94 74 00 	call	0xe8	; 0xe8 <SPI_send>
 12a:	8c 2f       	mov	r24, r28
 12c:	0e 94 74 00 	call	0xe8	; 0xe8 <SPI_send>
 130:	28 9a       	sbi	0x05, 0	; 5
 132:	15 c0       	rjmp	.+42     	; 0x15e <DAC_write+0x6a>
		case 2 :   DESELECT_DAC1;SELECT_DAC2;SPI_send(0b11010000|(val>>8));SPI_send(val);DESELECT_DAC2;break;
 134:	28 9a       	sbi	0x05, 0	; 5
 136:	29 98       	cbi	0x05, 1	; 5
 138:	87 2f       	mov	r24, r23
 13a:	80 6d       	ori	r24, 0xD0	; 208
 13c:	0e 94 74 00 	call	0xe8	; 0xe8 <SPI_send>
 140:	8c 2f       	mov	r24, r28
 142:	0e 94 74 00 	call	0xe8	; 0xe8 <SPI_send>
 146:	29 9a       	sbi	0x05, 1	; 5
 148:	0a c0       	rjmp	.+20     	; 0x15e <DAC_write+0x6a>
		case 3 :   DESELECT_DAC1;SELECT_DAC2;SPI_send(0b01010000|(val>>8));SPI_send(val);DESELECT_DAC2;break;
 14a:	28 9a       	sbi	0x05, 0	; 5
 14c:	29 98       	cbi	0x05, 1	; 5
 14e:	87 2f       	mov	r24, r23
 150:	80 65       	ori	r24, 0x50	; 80
 152:	0e 94 74 00 	call	0xe8	; 0xe8 <SPI_send>
 156:	8c 2f       	mov	r24, r28
 158:	0e 94 74 00 	call	0xe8	; 0xe8 <SPI_send>
 15c:	29 9a       	sbi	0x05, 1	; 5
	}
}
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <SYSTEM_init>:



void SYSTEM_init(void)
{
	ADC_Init();
 162:	0e 94 48 00 	call	0x90	; 0x90 <ADC_Init>
	crossfader[0].target=0;
	crossfader[0].target=1;
	crossfader[0].target=2;
	crossfader[0].target=3;
 166:	83 e0       	ldi	r24, 0x03	; 3
 168:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <crossfader+0x2>
	DDRB |= (1<<PB0); // chip select for DAC1
 16c:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= (1<<PB1); // chip select for DAC2
 16e:	21 9a       	sbi	0x04, 1	; 4
	DDRD = 0xFF;
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	8a b9       	out	0x0a, r24	; 10
	sei();
 174:	78 94       	sei
	DESELECT_DAC1;
 176:	28 9a       	sbi	0x05, 0	; 5
	DESELECT_DAC2;
 178:	29 9a       	sbi	0x05, 1	; 5
	SPI_init();
 17a:	0e 94 6c 00 	call	0xd8	; 0xd8 <SPI_init>
 17e:	08 95       	ret

00000180 <main>:



int main(void){

	SYSTEM_init();
 180:	0e 94 b1 00 	call	0x162	; 0x162 <SYSTEM_init>
		PORTD = PORTD | (mux<<4);  	// SWITCH MULTIPLEXER
		if((PINC&((1<<PC3)))==0x00)
		{   ch = (mux >> 2);		// MAP CHANNEL
			switch(ch)
			{	case 0 : ch=2;break;
				case 1 : ch=3;break;
 184:	0f 2e       	mov	r0, r31
 186:	f3 e0       	ldi	r31, 0x03	; 3
 188:	4f 2e       	mov	r4, r31
 18a:	f0 2d       	mov	r31, r0
		PORTD = PORTD & 0x0F;
		PORTD = PORTD | (mux<<4);  	// SWITCH MULTIPLEXER
		if((PINC&((1<<PC3)))==0x00)
		{   ch = (mux >> 2);		// MAP CHANNEL
			switch(ch)
			{	case 0 : ch=2;break;
 18c:	68 94       	set
 18e:	77 24       	eor	r7, r7
 190:	71 f8       	bld	r7, 1
				case 1 : ch=3;break;
				case 2 : ch=0;break;
				case 3 : ch=1;break;
 192:	66 24       	eor	r6, r6
 194:	63 94       	inc	r6
		
		pos = ADC_Read(0);			// READ AND ADD POSITION POT
		x = x + (pos-512);
		
		width = ADC_Read(2)>>3;
		width=339-width;
 196:	0f 2e       	mov	r0, r31
 198:	f3 e5       	ldi	r31, 0x53	; 83
 19a:	8f 2e       	mov	r8, r31
 19c:	99 24       	eor	r9, r9
 19e:	93 94       	inc	r9
 1a0:	f0 2d       	mov	r31, r0
		
		crossfader[0].val = ((333-(((abs(x + 512))*width)>>12))<<3);
 1a2:	0f 2e       	mov	r0, r31
 1a4:	f1 e0       	ldi	r31, 0x01	; 1
 1a6:	af 2e       	mov	r10, r31
 1a8:	f1 e0       	ldi	r31, 0x01	; 1
 1aa:	bf 2e       	mov	r11, r31
 1ac:	f0 2d       	mov	r31, r0
 1ae:	0f 2e       	mov	r0, r31
 1b0:	fd e4       	ldi	r31, 0x4D	; 77
 1b2:	ef 2e       	mov	r14, r31
 1b4:	ff 24       	eor	r15, r15
 1b6:	f3 94       	inc	r15
 1b8:	f0 2d       	mov	r31, r0
 1ba:	0f 2e       	mov	r0, r31
 1bc:	f7 e0       	ldi	r31, 0x07	; 7
 1be:	2f 2e       	mov	r2, r31
 1c0:	f1 e0       	ldi	r31, 0x01	; 1
 1c2:	3f 2e       	mov	r3, r31
 1c4:	f0 2d       	mov	r31, r0
 1c6:	c3 e1       	ldi	r28, 0x13	; 19
 1c8:	d1 e0       	ldi	r29, 0x01	; 1
 1ca:	68 94       	set
 1cc:	55 24       	eor	r5, r5
 1ce:	52 f8       	bld	r5, 2
	SYSTEM_init();
	
	while (1) {
		
		
		PORTD = PORTD & 0x0F;
 1d0:	8b b1       	in	r24, 0x0b	; 11
 1d2:	8f 70       	andi	r24, 0x0F	; 15
 1d4:	8b b9       	out	0x0b, r24	; 11
		PORTD = PORTD | (mux<<4);  	// SWITCH MULTIPLEXER
 1d6:	2b b1       	in	r18, 0x0b	; 11
 1d8:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 1dc:	00 e1       	ldi	r16, 0x10	; 16
 1de:	90 9f       	mul	r25, r16
 1e0:	c0 01       	movw	r24, r0
 1e2:	11 24       	eor	r1, r1
 1e4:	82 2b       	or	r24, r18
 1e6:	8b b9       	out	0x0b, r24	; 11
		if((PINC&((1<<PC3)))==0x00)
 1e8:	33 99       	sbic	0x06, 3	; 6
 1ea:	29 c0       	rjmp	.+82     	; 0x23e <main+0xbe>
		{   ch = (mux >> 2);		// MAP CHANNEL
 1ec:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 1f0:	82 2f       	mov	r24, r18
 1f2:	86 95       	lsr	r24
 1f4:	86 95       	lsr	r24
			switch(ch)
 1f6:	81 30       	cpi	r24, 0x01	; 1
 1f8:	59 f0       	breq	.+22     	; 0x210 <main+0x90>
 1fa:	38 f0       	brcs	.+14     	; 0x20a <main+0x8a>
 1fc:	82 30       	cpi	r24, 0x02	; 2
 1fe:	59 f0       	breq	.+22     	; 0x216 <main+0x96>
 200:	83 30       	cpi	r24, 0x03	; 3
 202:	61 f0       	breq	.+24     	; 0x21c <main+0x9c>
		
		
		PORTD = PORTD & 0x0F;
		PORTD = PORTD | (mux<<4);  	// SWITCH MULTIPLEXER
		if((PINC&((1<<PC3)))==0x00)
		{   ch = (mux >> 2);		// MAP CHANNEL
 204:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <ch>
 208:	0b c0       	rjmp	.+22     	; 0x220 <main+0xa0>
			switch(ch)
			{	case 0 : ch=2;break;
 20a:	70 92 1e 01 	sts	0x011E, r7	; 0x80011e <ch>
 20e:	08 c0       	rjmp	.+16     	; 0x220 <main+0xa0>
				case 1 : ch=3;break;
 210:	40 92 1e 01 	sts	0x011E, r4	; 0x80011e <ch>
 214:	05 c0       	rjmp	.+10     	; 0x220 <main+0xa0>
				case 2 : ch=0;break;
 216:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <ch>
 21a:	02 c0       	rjmp	.+4      	; 0x220 <main+0xa0>
				case 3 : ch=1;break;
 21c:	60 92 1e 01 	sts	0x011E, r6	; 0x80011e <ch>
			}
			tar = (mux % 4);		// SET TARGET ACCORDING TO SWITCH
 220:	23 70       	andi	r18, 0x03	; 3
 222:	20 93 19 01 	sts	0x0119, r18	; 0x800119 <tar>
			crossfader[ch].target=tar;
 226:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <ch>
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	fc 01       	movw	r30, r24
 22e:	ee 0f       	add	r30, r30
 230:	ff 1f       	adc	r31, r31
 232:	8e 0f       	add	r24, r30
 234:	9f 1f       	adc	r25, r31
 236:	fc 01       	movw	r30, r24
 238:	e9 5f       	subi	r30, 0xF9	; 249
 23a:	fe 4f       	sbci	r31, 0xFE	; 254
 23c:	22 83       	std	Z+2, r18	; 0x02
		}
		mux = ((mux + 1) % 16);		// INCREASE MUX COUNTER
 23e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	01 96       	adiw	r24, 0x01	; 1
 246:	8f 70       	andi	r24, 0x0F	; 15
 248:	90 78       	andi	r25, 0x80	; 128
 24a:	99 23       	and	r25, r25
 24c:	24 f4       	brge	.+8      	; 0x256 <main+0xd6>
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	80 6f       	ori	r24, 0xF0	; 240
 252:	9f 6f       	ori	r25, 0xFF	; 255
 254:	01 96       	adiw	r24, 0x01	; 1
 256:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		x=ADC_Read(1);			// READ_CV INPUT
 25a:	86 2d       	mov	r24, r6
 25c:	0e 94 5d 00 	call	0xba	; 0xba <ADC_Read>
 260:	a0 e0       	ldi	r26, 0x00	; 0
 262:	b0 e0       	ldi	r27, 0x00	; 0
 264:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <x>
 268:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <x+0x1>
 26c:	a0 93 03 01 	sts	0x0103, r26	; 0x800103 <x+0x2>
 270:	b0 93 04 01 	sts	0x0104, r27	; 0x800104 <x+0x3>
		
		pos = ADC_Read(0);			// READ AND ADD POSITION POT
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	0e 94 5d 00 	call	0xba	; 0xba <ADC_Read>
 27a:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <pos+0x1>
 27e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <pos>
		x = x + (pos-512);
 282:	92 50       	subi	r25, 0x02	; 2
 284:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <x>
 288:	50 91 02 01 	lds	r21, 0x0102	; 0x800102 <x+0x1>
 28c:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <x+0x2>
 290:	70 91 04 01 	lds	r23, 0x0104	; 0x800104 <x+0x3>
 294:	8a 01       	movw	r16, r20
 296:	9b 01       	movw	r18, r22
 298:	08 0f       	add	r16, r24
 29a:	19 1f       	adc	r17, r25
 29c:	21 1d       	adc	r18, r1
 29e:	31 1d       	adc	r19, r1
 2a0:	00 93 01 01 	sts	0x0101, r16	; 0x800101 <x>
 2a4:	10 93 02 01 	sts	0x0102, r17	; 0x800102 <x+0x1>
 2a8:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <x+0x2>
 2ac:	30 93 04 01 	sts	0x0104, r19	; 0x800104 <x+0x3>
		
		width = ADC_Read(2)>>3;
 2b0:	87 2d       	mov	r24, r7
 2b2:	0e 94 5d 00 	call	0xba	; 0xba <ADC_Read>
 2b6:	96 95       	lsr	r25
 2b8:	87 95       	ror	r24
 2ba:	96 95       	lsr	r25
 2bc:	87 95       	ror	r24
 2be:	96 95       	lsr	r25
 2c0:	87 95       	ror	r24
		width=339-width;
 2c2:	a4 01       	movw	r20, r8
 2c4:	48 1b       	sub	r20, r24
 2c6:	59 0b       	sbc	r21, r25
 2c8:	50 93 20 01 	sts	0x0120, r21	; 0x800120 <width+0x1>
 2cc:	40 93 1f 01 	sts	0x011F, r20	; 0x80011f <width>
		
		crossfader[0].val = ((333-(((abs(x + 512))*width)>>12))<<3);
 2d0:	f5 01       	movw	r30, r10
 2d2:	80 81       	ld	r24, Z
 2d4:	91 81       	ldd	r25, Z+1	; 0x01
 2d6:	9e 5f       	subi	r25, 0xFE	; 254
 2d8:	9c 01       	movw	r18, r24
 2da:	99 23       	and	r25, r25
 2dc:	24 f4       	brge	.+8      	; 0x2e6 <main+0x166>
 2de:	22 27       	eor	r18, r18
 2e0:	33 27       	eor	r19, r19
 2e2:	28 1b       	sub	r18, r24
 2e4:	39 0b       	sbc	r19, r25
 2e6:	42 9f       	mul	r20, r18
 2e8:	c0 01       	movw	r24, r0
 2ea:	43 9f       	mul	r20, r19
 2ec:	90 0d       	add	r25, r0
 2ee:	52 9f       	mul	r21, r18
 2f0:	90 0d       	add	r25, r0
 2f2:	11 24       	eor	r1, r1
 2f4:	89 2f       	mov	r24, r25
 2f6:	99 27       	eor	r25, r25
 2f8:	82 95       	swap	r24
 2fa:	8f 70       	andi	r24, 0x0F	; 15
 2fc:	87 01       	movw	r16, r14
 2fe:	08 1b       	sub	r16, r24
 300:	19 0b       	sbc	r17, r25
 302:	c8 01       	movw	r24, r16
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	f1 01       	movw	r30, r2
 312:	91 83       	std	Z+1, r25	; 0x01
 314:	80 83       	st	Z, r24
		if(crossfader[0].val > 1024) LED1_ON; else LED1_OFF;
 316:	81 30       	cpi	r24, 0x01	; 1
 318:	94 40       	sbci	r25, 0x04	; 4
 31a:	10 f0       	brcs	.+4      	; 0x320 <main+0x1a0>
#ifndef BITOP_H_
#define BITOP_H_

static inline void BIT_SET8(volatile uint8_t *target, uint8_t bit) __attribute__((always_inline));
static inline void BIT_SET8(volatile uint8_t *target, uint8_t bit){
	*target |= (1<<bit);
 31c:	45 9a       	sbi	0x08, 5	; 8
 31e:	01 c0       	rjmp	.+2      	; 0x322 <main+0x1a2>
};

static inline void BIT_CLR8(volatile uint8_t *target, uint8_t bit) __attribute__((always_inline));
static inline void BIT_CLR8(volatile uint8_t *target, uint8_t bit){
	*target &= ~(1<<bit);
 320:	45 98       	cbi	0x08, 5	; 8
		if(crossfader[3].val < 0) crossfader[3].val = 0;
		
		crossfader[1].val = ((333-(((abs(x + 179))*width)>>12))<<3);
 322:	f5 01       	movw	r30, r10
 324:	80 81       	ld	r24, Z
 326:	91 81       	ldd	r25, Z+1	; 0x01
 328:	8d 54       	subi	r24, 0x4D	; 77
 32a:	9f 4f       	sbci	r25, 0xFF	; 255
 32c:	9c 01       	movw	r18, r24
 32e:	22 f4       	brpl	.+8      	; 0x338 <main+0x1b8>
 330:	22 27       	eor	r18, r18
 332:	33 27       	eor	r19, r19
 334:	28 1b       	sub	r18, r24
 336:	39 0b       	sbc	r19, r25
 338:	40 91 1f 01 	lds	r20, 0x011F	; 0x80011f <width>
 33c:	50 91 20 01 	lds	r21, 0x0120	; 0x800120 <width+0x1>
 340:	24 9f       	mul	r18, r20
 342:	c0 01       	movw	r24, r0
 344:	25 9f       	mul	r18, r21
 346:	90 0d       	add	r25, r0
 348:	34 9f       	mul	r19, r20
 34a:	90 0d       	add	r25, r0
 34c:	11 24       	eor	r1, r1
 34e:	89 2f       	mov	r24, r25
 350:	99 27       	eor	r25, r25
 352:	82 95       	swap	r24
 354:	8f 70       	andi	r24, 0x0F	; 15
 356:	87 01       	movw	r16, r14
 358:	08 1b       	sub	r16, r24
 35a:	19 0b       	sbc	r17, r25
 35c:	c8 01       	movw	r24, r16
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	f1 01       	movw	r30, r2
 36c:	94 83       	std	Z+4, r25	; 0x04
 36e:	83 83       	std	Z+3, r24	; 0x03
		if(crossfader[1].val > 1024) LED2_ON; else LED2_OFF;
 370:	81 30       	cpi	r24, 0x01	; 1
 372:	94 40       	sbci	r25, 0x04	; 4
 374:	10 f0       	brcs	.+4      	; 0x37a <main+0x1fa>
#ifndef BITOP_H_
#define BITOP_H_

static inline void BIT_SET8(volatile uint8_t *target, uint8_t bit) __attribute__((always_inline));
static inline void BIT_SET8(volatile uint8_t *target, uint8_t bit){
	*target |= (1<<bit);
 376:	44 9a       	sbi	0x08, 4	; 8
 378:	01 c0       	rjmp	.+2      	; 0x37c <main+0x1fc>
};

static inline void BIT_CLR8(volatile uint8_t *target, uint8_t bit) __attribute__((always_inline));
static inline void BIT_CLR8(volatile uint8_t *target, uint8_t bit){
	*target &= ~(1<<bit);
 37a:	44 98       	cbi	0x08, 4	; 8
		if(crossfader[3].val < 0) crossfader[3].val = 0;
		
		crossfader[2].val = ((333-(((abs(x - 179))*width)>>12))<<3);
 37c:	f5 01       	movw	r30, r10
 37e:	80 81       	ld	r24, Z
 380:	91 81       	ldd	r25, Z+1	; 0x01
 382:	83 5b       	subi	r24, 0xB3	; 179
 384:	91 09       	sbc	r25, r1
 386:	9c 01       	movw	r18, r24
 388:	22 f4       	brpl	.+8      	; 0x392 <main+0x212>
 38a:	22 27       	eor	r18, r18
 38c:	33 27       	eor	r19, r19
 38e:	28 1b       	sub	r18, r24
 390:	39 0b       	sbc	r19, r25
 392:	40 91 1f 01 	lds	r20, 0x011F	; 0x80011f <width>
 396:	50 91 20 01 	lds	r21, 0x0120	; 0x800120 <width+0x1>
 39a:	24 9f       	mul	r18, r20
 39c:	c0 01       	movw	r24, r0
 39e:	25 9f       	mul	r18, r21
 3a0:	90 0d       	add	r25, r0
 3a2:	34 9f       	mul	r19, r20
 3a4:	90 0d       	add	r25, r0
 3a6:	11 24       	eor	r1, r1
 3a8:	89 2f       	mov	r24, r25
 3aa:	99 27       	eor	r25, r25
 3ac:	82 95       	swap	r24
 3ae:	8f 70       	andi	r24, 0x0F	; 15
 3b0:	87 01       	movw	r16, r14
 3b2:	08 1b       	sub	r16, r24
 3b4:	19 0b       	sbc	r17, r25
 3b6:	c8 01       	movw	r24, r16
 3b8:	88 0f       	add	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	88 0f       	add	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	f1 01       	movw	r30, r2
 3c6:	97 83       	std	Z+7, r25	; 0x07
 3c8:	86 83       	std	Z+6, r24	; 0x06
		if(crossfader[2].val > 1024) LED3_ON; else LED3_OFF;
 3ca:	81 30       	cpi	r24, 0x01	; 1
 3cc:	94 40       	sbci	r25, 0x04	; 4
 3ce:	10 f0       	brcs	.+4      	; 0x3d4 <main+0x254>
#ifndef BITOP_H_
#define BITOP_H_

static inline void BIT_SET8(volatile uint8_t *target, uint8_t bit) __attribute__((always_inline));
static inline void BIT_SET8(volatile uint8_t *target, uint8_t bit){
	*target |= (1<<bit);
 3d0:	5a 9a       	sbi	0x0b, 2	; 11
 3d2:	01 c0       	rjmp	.+2      	; 0x3d6 <main+0x256>
};

static inline void BIT_CLR8(volatile uint8_t *target, uint8_t bit) __attribute__((always_inline));
static inline void BIT_CLR8(volatile uint8_t *target, uint8_t bit){
	*target &= ~(1<<bit);
 3d4:	5a 98       	cbi	0x0b, 2	; 11
		if(crossfader[3].val < 0) crossfader[3].val = 0;
		
		crossfader[3].val = ((333-(((abs(x - 512))*width)>>12))<<3);
 3d6:	f5 01       	movw	r30, r10
 3d8:	80 81       	ld	r24, Z
 3da:	91 81       	ldd	r25, Z+1	; 0x01
 3dc:	92 50       	subi	r25, 0x02	; 2
 3de:	9c 01       	movw	r18, r24
 3e0:	99 23       	and	r25, r25
 3e2:	24 f4       	brge	.+8      	; 0x3ec <main+0x26c>
 3e4:	22 27       	eor	r18, r18
 3e6:	33 27       	eor	r19, r19
 3e8:	28 1b       	sub	r18, r24
 3ea:	39 0b       	sbc	r19, r25
 3ec:	40 91 1f 01 	lds	r20, 0x011F	; 0x80011f <width>
 3f0:	50 91 20 01 	lds	r21, 0x0120	; 0x800120 <width+0x1>
 3f4:	24 9f       	mul	r18, r20
 3f6:	c0 01       	movw	r24, r0
 3f8:	25 9f       	mul	r18, r21
 3fa:	90 0d       	add	r25, r0
 3fc:	34 9f       	mul	r19, r20
 3fe:	90 0d       	add	r25, r0
 400:	11 24       	eor	r1, r1
 402:	89 2f       	mov	r24, r25
 404:	99 27       	eor	r25, r25
 406:	82 95       	swap	r24
 408:	8f 70       	andi	r24, 0x0F	; 15
 40a:	87 01       	movw	r16, r14
 40c:	08 1b       	sub	r16, r24
 40e:	19 0b       	sbc	r17, r25
 410:	c8 01       	movw	r24, r16
 412:	88 0f       	add	r24, r24
 414:	99 1f       	adc	r25, r25
 416:	88 0f       	add	r24, r24
 418:	99 1f       	adc	r25, r25
 41a:	88 0f       	add	r24, r24
 41c:	99 1f       	adc	r25, r25
 41e:	f1 01       	movw	r30, r2
 420:	92 87       	std	Z+10, r25	; 0x0a
 422:	81 87       	std	Z+9, r24	; 0x09
		if(crossfader[3].val > 1024) LED4_ON; else LED4_OFF;
 424:	81 30       	cpi	r24, 0x01	; 1
 426:	94 40       	sbci	r25, 0x04	; 4
 428:	10 f0       	brcs	.+4      	; 0x42e <__FUSE_REGION_LENGTH__+0x2e>
#ifndef BITOP_H_
#define BITOP_H_

static inline void BIT_SET8(volatile uint8_t *target, uint8_t bit) __attribute__((always_inline));
static inline void BIT_SET8(volatile uint8_t *target, uint8_t bit){
	*target |= (1<<bit);
 42a:	5b 9a       	sbi	0x0b, 3	; 11
 42c:	01 c0       	rjmp	.+2      	; 0x430 <__FUSE_REGION_LENGTH__+0x30>
};

static inline void BIT_CLR8(volatile uint8_t *target, uint8_t bit) __attribute__((always_inline));
static inline void BIT_CLR8(volatile uint8_t *target, uint8_t bit){
	*target &= ~(1<<bit);
 42e:	5b 98       	cbi	0x0b, 3	; 11
 430:	00 91 05 01 	lds	r16, 0x0105	; 0x800105 <b>
 434:	10 91 06 01 	lds	r17, 0x0106	; 0x800106 <b+0x1>
 438:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <a>
 43c:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <a+0x1>
 440:	40 91 17 01 	lds	r20, 0x0117	; 0x800117 <c>
 444:	50 91 18 01 	lds	r21, 0x0118	; 0x800118 <c+0x1>
 448:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <d>
 44c:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <d+0x1>
 450:	a9 e0       	ldi	r26, 0x09	; 9
 452:	b1 e0       	ldi	r27, 0x01	; 1
 454:	f1 01       	movw	r30, r2
		if(crossfader[3].val < 0) crossfader[3].val = 0;
		
		for(i=0;i<4;i++)
		{   if(crossfader[i].target==0) a+=crossfader[i].val;
 456:	dc 90       	ld	r13, X
 458:	d1 10       	cpse	r13, r1
 45a:	05 c0       	rjmp	.+10     	; 0x466 <__FUSE_REGION_LENGTH__+0x66>
 45c:	80 81       	ld	r24, Z
 45e:	91 81       	ldd	r25, Z+1	; 0x01
 460:	68 0f       	add	r22, r24
 462:	79 1f       	adc	r23, r25
 464:	10 c0       	rjmp	.+32     	; 0x486 <__FUSE_REGION_LENGTH__+0x86>
			if(crossfader[i].target==1) b+=crossfader[i].val;
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	d8 12       	cpse	r13, r24
 46a:	05 c0       	rjmp	.+10     	; 0x476 <__FUSE_REGION_LENGTH__+0x76>
 46c:	80 81       	ld	r24, Z
 46e:	91 81       	ldd	r25, Z+1	; 0x01
 470:	08 0f       	add	r16, r24
 472:	19 1f       	adc	r17, r25
 474:	0f c0       	rjmp	.+30     	; 0x494 <__FUSE_REGION_LENGTH__+0x94>
			if(crossfader[i].target==2) c+=crossfader[i].val;
 476:	82 e0       	ldi	r24, 0x02	; 2
 478:	d8 12       	cpse	r13, r24
 47a:	05 c0       	rjmp	.+10     	; 0x486 <__FUSE_REGION_LENGTH__+0x86>
 47c:	80 81       	ld	r24, Z
 47e:	91 81       	ldd	r25, Z+1	; 0x01
 480:	48 0f       	add	r20, r24
 482:	59 1f       	adc	r21, r25
 484:	07 c0       	rjmp	.+14     	; 0x494 <__FUSE_REGION_LENGTH__+0x94>
			if(crossfader[i].target==3) d+=crossfader[i].val;
 486:	83 e0       	ldi	r24, 0x03	; 3
 488:	d8 12       	cpse	r13, r24
 48a:	04 c0       	rjmp	.+8      	; 0x494 <__FUSE_REGION_LENGTH__+0x94>
 48c:	80 81       	ld	r24, Z
 48e:	91 81       	ldd	r25, Z+1	; 0x01
 490:	28 0f       	add	r18, r24
 492:	39 1f       	adc	r19, r25
 494:	13 96       	adiw	r26, 0x03	; 3
 496:	33 96       	adiw	r30, 0x03	; 3
		
		crossfader[3].val = ((333-(((abs(x - 512))*width)>>12))<<3);
		if(crossfader[3].val > 1024) LED4_ON; else LED4_OFF;
		if(crossfader[3].val < 0) crossfader[3].val = 0;
		
		for(i=0;i<4;i++)
 498:	ec 17       	cp	r30, r28
 49a:	fd 07       	cpc	r31, r29
 49c:	e1 f6       	brne	.-72     	; 0x456 <__FUSE_REGION_LENGTH__+0x56>
 49e:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <d+0x1>
 4a2:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <d>
 4a6:	50 93 18 01 	sts	0x0118, r21	; 0x800118 <c+0x1>
 4aa:	40 93 17 01 	sts	0x0117, r20	; 0x800117 <c>
 4ae:	10 93 06 01 	sts	0x0106, r17	; 0x800106 <b+0x1>
 4b2:	00 93 05 01 	sts	0x0105, r16	; 0x800105 <b>
 4b6:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <a+0x1>
 4ba:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <a>
 4be:	50 92 16 01 	sts	0x0116, r5	; 0x800116 <i>
			if(crossfader[i].target==1) b+=crossfader[i].val;
			if(crossfader[i].target==2) c+=crossfader[i].val;
			if(crossfader[i].target==3) d+=crossfader[i].val;
		}
		
		DAC_write(0,a);
 4c2:	80 e0       	ldi	r24, 0x00	; 0
 4c4:	0e 94 7a 00 	call	0xf4	; 0xf4 <DAC_write>
		DAC_write(1,b);
 4c8:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <b>
 4cc:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <b+0x1>
 4d0:	86 2d       	mov	r24, r6
 4d2:	0e 94 7a 00 	call	0xf4	; 0xf4 <DAC_write>
		DAC_write(2,c);
 4d6:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <c>
 4da:	70 91 18 01 	lds	r23, 0x0118	; 0x800118 <c+0x1>
 4de:	87 2d       	mov	r24, r7
 4e0:	0e 94 7a 00 	call	0xf4	; 0xf4 <DAC_write>
		DAC_write(3,d);
 4e4:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <d>
 4e8:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <d+0x1>
 4ec:	84 2d       	mov	r24, r4
 4ee:	0e 94 7a 00 	call	0xf4	; 0xf4 <DAC_write>
		a=0;b=0;c=0;d=0;
 4f2:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <a+0x1>
 4f6:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <a>
 4fa:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <b+0x1>
 4fe:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <b>
 502:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <c+0x1>
 506:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <c>
 50a:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <d+0x1>
 50e:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <d>
		
	}
 512:	5e ce       	rjmp	.-836    	; 0x1d0 <main+0x50>

00000514 <_exit>:
 514:	f8 94       	cli

00000516 <__stop_program>:
 516:	ff cf       	rjmp	.-2      	; 0x516 <__stop_program>
